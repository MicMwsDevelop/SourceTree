//
// SendMailForm.cs
//
// PC安心サポート管理 製品サポート情報ソフト保守更新画面
// 
// Copyright (C) MIC All Rights Reserved.
// 
// Ver1.000 新規作成(2018/11/19 勝呂)
// 
using DataGridViewAutoFilter;
using MwsLib.BaseFactory.PcSupportManager;
using MwsLib.Common;
using MwsLib.DB.SqlServer.PcSupportManager;
using System;
using System.Collections.Generic;
using System.Data;
using System.Windows.Forms;

namespace PcSupportManager.Forms
{
	/// <summary>
	/// 製品サポート情報ソフト保守更新画面
	/// </summary>
	public partial class SoftMainteForm : Form
	{
		/// <summary>
		/// PC安心サポート管理情報リスト DataSource
		/// </summary>
		private BindingSource dataGridViewControlBindingSource;

		/// <summary>
		///  PC安心サポート管理情報リスト
		/// </summary>
		private List<PcSupportControl> PcSupportControlList;

		/// <summary>
		/// 製品サポート情報ソフト保守情報リスト DataSource
		/// </summary>
		private BindingSource dataGridViewSoftBindingSource;

		/// <summary>
		/// 製品サポート情報ソフト保守情報リスト
		/// </summary>
		private List<SoftMaintenanceContract> SoftMaintenanceContractList;

		/// <summary>
		/// デフォルトコンストラクタ
		/// </summary>
		public SoftMainteForm()
		{
			InitializeComponent();

			dataGridViewControlBindingSource = null;
			PcSupportControlList = null;
			dataGridViewSoftBindingSource = null;
			SoftMaintenanceContractList = null;
			dataGridViewSoft.BindingContextChanged += new EventHandler(dataGridViewControl_BindingContextChanged);
		}

		/// <summary>
		/// Form Load
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void SoftMainteForm_Load(object sender, EventArgs e)
		{
			// PC安心サポート管理情報を表示
			radioButtonPcSupport.Checked = true;
		}

		/// <summary>
		/// Configures the autogenerated columns, replacing their header
		/// cells with AutoFilter header cells. 
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void dataGridViewControl_BindingContextChanged(object sender, EventArgs e)
		{
			// Continue only if the data source has been set.
			if (dataGridViewSoft.DataSource == null)
			{
				return;
			}
			// Add the AutoFilter header cell to each column.
			foreach (DataGridViewColumn col in dataGridViewSoft.Columns)
			{
				col.HeaderCell = new DataGridViewAutoFilterColumnHeaderCell(col.HeaderCell);
			}
			// Resize the columns to fit their contents.
			//dataGridViewUser.AutoResizeColumns();
		}

		/// <summary>
		/// PC安心サポート管理情報
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void radioButtonPcSupport_CheckedChanged(object sender, EventArgs e)
		{
			buttonUpdateSoftMainte.Enabled = true;

			dataGridViewSoft.DataSource = null;
			dataGridViewSoft.Rows.Clear();
			dataGridViewSoft.Columns.Clear();
			dataGridViewSoft.ReadOnly = false;

			// 元のカーソルを保持
			Cursor preCursor = Cursor.Current;

			// カーソルを待機カーソルに変更
			Cursor.Current = Cursors.WaitCursor;

			DataTable dataTable = PcSupportManagerGetIO.GetPcSupportControl();
			PcSupportControlList = PcSupportManagerController.ConvertPcSupportControl(dataTable);

			// チェックボックス列を作成
			DataColumn column = new DataColumn("SOFT_MAINTE", typeof(Boolean));

			// DataTableにチェックボックス列を追加
			dataTable.Columns.Add(column);
			for (int i = 0; i < dataTable.Rows.Count; i++)
			{
				// 値を予め格納していないと参照時にエラーになる
				dataTable.Rows[i]["SOFT_MAINTE"] = false;
			}
			dataGridViewControlBindingSource = new BindingSource(dataTable, null);
			Date limit = Program.SystemDate.ToYearMonth().Last;
			dataGridViewControlBindingSource.Filter = string.Format(@"DISABLE_FLAG = '0' AND WW_RENEWAL_FLAG = '1' AND ORDER_APPROVAL_DATE is not null AND START_DATE is not null AND START_DATE <= '{0}'", limit.ToSqlDateTimeString());
			dataGridViewSoft.DataSource = dataGridViewControlBindingSource;

			// カラム名の変更
			dataGridViewSoft.Columns["SOFT_MAINTE"].HeaderText = "更新対象";
			dataGridViewSoft.Columns["ORDER_NO"].HeaderText = "受注No";
			dataGridViewSoft.Columns["CUSTOMER_ID"].HeaderText = "顧客No";
			dataGridViewSoft.Columns["CLINIC_NAME"].HeaderText = "医院名";
			dataGridViewSoft.Columns["GOODS_NAME"].HeaderText = "商品名";
			dataGridViewSoft.Columns["START_DATE"].HeaderText = "契約開始日";
			dataGridViewSoft.Columns["END_DATE"].HeaderText = "契約終了日";
			dataGridViewSoft.Columns["BRANCH_NAME"].HeaderText = "拠店名";
			dataGridViewSoft.Columns["SALESMAN_NAME"].HeaderText = "担当者名";
			dataGridViewSoft.Columns["ORDER_APPROVAL_DATE"].HeaderText = "受注承認日";
			dataGridViewSoft.Columns["ORDER_REPORT_ACCEPT"].HeaderText = "申込用紙有無";
			dataGridViewSoft.Columns["WW_RENEWAL_FLAG"].HeaderText = "ソフト保守更新フラグ";

			// 非表示
			dataGridViewSoft.Columns["GOODS_ID"].Visible = false;
			dataGridViewSoft.Columns["PRICE"].Visible = false;
			dataGridViewSoft.Columns["AGREE_YEAR"].Visible = false;
			dataGridViewSoft.Columns["PERIOD_END_DATE"].Visible = false;
			dataGridViewSoft.Columns["BRANCH_ID"].Visible = false;
			dataGridViewSoft.Columns["SALESMAN_ID"].Visible = false;
			dataGridViewSoft.Columns["REMARK"].Visible = false;
			dataGridViewSoft.Columns["CANCEL_DATE"].Visible = false;
			dataGridViewSoft.Columns["CANCEL_REPORT_ACCEPT"].Visible = false;
			dataGridViewSoft.Columns["CANCEL_REASON"].Visible = false;
			dataGridViewSoft.Columns["DISABLE_FLAG"].Visible = false;
			dataGridViewSoft.Columns["CREATE_DATE"].Visible = false;
			dataGridViewSoft.Columns["CREATE_PERSON"].Visible = false;
			dataGridViewSoft.Columns["UPDATE_DATE"].Visible = false;
			dataGridViewSoft.Columns["UPDATE_PERSON"].Visible = false;
			dataGridViewSoft.Columns["ORDER_DATE"].Visible = false;
			dataGridViewSoft.Columns["MAIL_ADDRESS"].Visible = false;
			dataGridViewSoft.Columns["START_MAIL_DATE"].Visible = false;
			dataGridViewSoft.Columns["GUIDE_MAIL_DATE"].Visible = false;
			dataGridViewSoft.Columns["UPDATE_MAIL_DATE"].Visible = false;

			// 表示順の変更
			dataGridViewSoft.Columns["SOFT_MAINTE"].DisplayIndex = 0;
			dataGridViewSoft.Columns["ORDER_NO"].DisplayIndex = 1;
			dataGridViewSoft.Columns["CUSTOMER_ID"].DisplayIndex = 2;
			dataGridViewSoft.Columns["CLINIC_NAME"].DisplayIndex = 3;
			dataGridViewSoft.Columns["GOODS_NAME"].DisplayIndex = 4;
			dataGridViewSoft.Columns["START_DATE"].DisplayIndex = 5;
			dataGridViewSoft.Columns["END_DATE"].DisplayIndex = 6;
			dataGridViewSoft.Columns["BRANCH_NAME"].DisplayIndex = 7;
			dataGridViewSoft.Columns["SALESMAN_NAME"].DisplayIndex = 8;
			dataGridViewSoft.Columns["ORDER_APPROVAL_DATE"].DisplayIndex = 9;
			dataGridViewSoft.Columns["ORDER_REPORT_ACCEPT"].DisplayIndex = 10;
			dataGridViewSoft.Columns["WW_RENEWAL_FLAG"].DisplayIndex = 11;

			// 編集不可
			dataGridViewSoft.Columns["ORDER_NO"].ReadOnly = true;
			dataGridViewSoft.Columns["CUSTOMER_ID"].ReadOnly = true;
			dataGridViewSoft.Columns["CLINIC_NAME"].ReadOnly = true;
			dataGridViewSoft.Columns["GOODS_NAME"].ReadOnly = true;
			dataGridViewSoft.Columns["START_DATE"].ReadOnly = true;
			dataGridViewSoft.Columns["END_DATE"].ReadOnly = true;
			dataGridViewSoft.Columns["BRANCH_NAME"].ReadOnly = true;
			dataGridViewSoft.Columns["SALESMAN_NAME"].ReadOnly = true;
			dataGridViewSoft.Columns["ORDER_APPROVAL_DATE"].ReadOnly = true;
			dataGridViewSoft.Columns["ORDER_REPORT_ACCEPT"].ReadOnly = true;
			dataGridViewSoft.Columns["WW_RENEWAL_FLAG"].ReadOnly = true;

			dataGridViewSoft.ResumeLayout();

			// 検索対象
			textBoxSpan.Text = string.Format("契約開始日が{0}以前", limit.ToString());

			// 製品サポート情報ソフト保守更新を有効
			buttonUpdateSoftMainte.Enabled = true;

			// レコード件数の表示
			textBoxCount.Text = string.Format("{0}/{1}", dataGridViewControlBindingSource.Count, PcSupportControlList.Count);
		}

		/// <summary>
		/// 製品サポート情報ソフト保守
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void radioButtonSoftMainte_CheckedChanged(object sender, EventArgs e)
		{
			buttonUpdateSoftMainte.Enabled = false;

			dataGridViewSoft.DataSource = null;
			dataGridViewSoft.Rows.Clear();
			dataGridViewSoft.Columns.Clear();
			dataGridViewSoft.ReadOnly = true;

			// 元のカーソルを保持
			Cursor preCursor = Cursor.Current;

			// カーソルを待機カーソルに変更
			Cursor.Current = Cursors.WaitCursor;

			DataTable dataTable = PcSupportManagerGetIO.GetSoftMaintenanceContract();
			SoftMaintenanceContractList = PcSupportManagerController.ConvertSoftMaintenanceContractList(dataTable);
			dataGridViewSoftBindingSource = new BindingSource(dataTable, null);
			dataGridViewSoftBindingSource.Filter = @"fhsSメンテ契約開始 is not null AND 0 < LEN(fhsSメンテ契約開始)";
			dataGridViewSoft.DataSource = dataGridViewSoftBindingSource;

			// カラム名の変更
			dataGridViewSoft.Columns["fhsCliMicID"].HeaderText = "顧客No";
			dataGridViewSoft.Columns["fhsS保守"].HeaderText = "S状況";
			dataGridViewSoft.Columns["fhsSメンテ契約開始"].HeaderText = "契約開始";
			dataGridViewSoft.Columns["fhsSメンテ契約終了"].HeaderText = "契約終了";
			dataGridViewSoft.Columns["fhsS契約年数"].HeaderText = "契約年数";
			dataGridViewSoft.Columns["fhsSメンテ料金"].HeaderText = "メンテ料金";
			dataGridViewSoft.Columns["fhsS契約書回収年月"].HeaderText = "契約書回収年月日";
			dataGridViewSoft.Columns["fhsSメンテ契約備考1"].HeaderText = "契約備考１";

			dataGridViewSoft.ResumeLayout();

			// 検索対象
			textBoxSpan.Text = string.Empty;

			// 製品サポート情報ソフト保守更新を無効
			buttonUpdateSoftMainte.Enabled = false;

			// レコード件数の表示
			textBoxCount.Text = string.Format("{0}/{1}", dataGridViewSoftBindingSource.Count, SoftMaintenanceContractList.Count);
		}

		/// <summary>
		/// 製品サポート情報ソフト保守更新
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void buttonUpdateSoftMainte_Click(object sender, EventArgs e)
		{
			// 元のカーソルを保持
			Cursor preCursor = Cursor.Current;

			// カーソルを待機カーソルに変更
			Cursor.Current = Cursors.WaitCursor;

			PcSupportControlList = PcSupportManagerAccess.GetPcSupportControl();
			SoftMaintenanceContractList = PcSupportManagerAccess.GetSoftMaintenanceContract();

			int updateCount = 0;
			for (int i = 0; i < dataGridViewSoft.Rows.Count; i++)
			{
				// SOFT_MAINTE
				if (true == (bool)dataGridViewSoft.Rows[i].Cells["SOFT_MAINTE"].Value)
				{
					// ORDER_NO
					string orderNo = (string)dataGridViewSoft.Rows[i].Cells["ORDER_NO"].Value;
					PcSupportControl pc = PcSupportControlList.Find(p => p.OrderNo == orderNo);
					if (null != pc)
					{
						SoftMaintenanceContract soft = SoftMaintenanceContractList.Find(p => p.CustomerNo == pc.CustomerNo);
						if (null != soft)
						{
							soft.SetPcSupportControl(pc, true);
						}
						else
						{
							soft = new SoftMaintenanceContract(pc, true);
						}
						try
						{
							PcSupportManagerAccess.SetSoftMaintenanceContract(soft);
							updateCount++;
						}
						catch (Exception ex)
						{
							MessageBox.Show(string.Format("PcSupportManagerAccess.SetSoftMaintenanceContract() Error({0})", ex.Message), "エラー", MessageBoxButtons.OK, MessageBoxIcon.Stop);
							return;
						}
						pc.WonderWebRenewalFlag = false;
						pc.UpdateDateTime = DateTime.Now;
						pc.UpdatePerson = PcSupportControl.PERSON_NAME;
						try
						{
							PcSupportManagerAccess.SetPcSupportControl(pc);
						}
						catch (Exception ex)
						{
							MessageBox.Show(string.Format("PcSupportManagerAccess.SetPcSupportControl() Error({0})", ex.Message), "エラー", MessageBoxButtons.OK, MessageBoxIcon.Stop);
							return;
						}
					}
				}
			}
			// カーソルを元に戻す
			Cursor.Current = preCursor;

			if (0 < updateCount)
			{
				MessageBox.Show(string.Format("{0}件の製品サポート情報ソフト保守情報を更新しました。", updateCount), "製品サポート情報ソフト保守情報更新", MessageBoxButtons.OK, MessageBoxIcon.Information);
			}
			// DataSourceのクリア
			((DataTable)dataGridViewControlBindingSource.DataSource).Clear();

			DataTable dataTable = PcSupportManagerGetIO.GetPcSupportControl();

			// チェックボックス列を作成
			DataColumn column = new DataColumn("SOFT_MAINTE", typeof(Boolean));

			// DataTableにチェックボックス列を追加
			dataTable.Columns.Add(column);
			for (int i = 0; i < dataTable.Rows.Count; i++)
			{
				// 値を予め格納していないと参照時にエラーになる
				dataTable.Rows[i]["SOFT_MAINTE"] = false;
			}
			dataGridViewControlBindingSource = new BindingSource(dataTable, null);
			Date limit = Program.SystemDate.ToYearMonth().Last;
			dataGridViewControlBindingSource.Filter = string.Format(@"DISABLE_FLAG = '0' AND WW_RENEWAL_FLAG = '1' AND ORDER_APPROVAL_DATE is not null AND START_DATE is not null AND START_DATE <= '{0}'", limit.ToSqlDateTimeString());
			dataGridViewSoft.DataSource = dataGridViewControlBindingSource;

			// レコード件数の表示
			textBoxCount.Text = string.Format("{0}/{1}", dataGridViewControlBindingSource.Count, PcSupportControlList.Count);
		}
	}
}
